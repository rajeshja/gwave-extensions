<?xml version="1.0" encoding="UTF-8" ?> 
<Module>
	<ModulePrefs title="Recommendations Gadget" height="280">
		<Require feature="wave" /> 
		<Require feature="dynamic-height" />
	</ModulePrefs>
	<Content type="html">
    <![CDATA[ 
		<style type="text/css">

			#reco-gadget {
				font-family: Verdana, Bitstream Vera Sans, sans-serif;
				font-size: 0.9em;
				max-height: 280px;
				overflow: auto;
			}

			table.recos {
				margin: 0;
				padding: 0;
				border-collapse: collapse;
				font-family: Verdana, Bitstream Vera Sans, sans-serif;
				font-size: 0.9em;
			}
			
			.recos td, .recos th {
				border: solid black 1px;
				margin: 0;
				padding: 0;
			}

			.recos form {
				margin: 0;
				padding: 0;
			}

			.recos fieldset {
				border: 0;
				padding: 1px;
				margin: 0;
				font-size: 0.9em;
			}

			.recos fieldset input[type="radio"] {
				margin: 0;
				padding-left: 0px;
				height: 9px;
				width: 9px;
			}

			.recos fieldset input {
				font-size: 0.9em;
			}
		</style>
		<script type="text/javascript" 
						src="http://pune-gtug-wave-samples.googlecode.com/svn/trunk/wave-polling-gadget/json2.js"></script>
		<script type="text/javascript">

			function rate(radiobutton) {
				row = radiobutton.parentNode.parentNode.parentNode.parentNode;
				//row = document.getElementById("book" + rownum);
				bookcell = row.getElementsByTagName("TD")[1];
				ratingcell = row.getElementsByTagName("TD")[2];
				bookname = bookcell.textContent;
				ratingchoices = ratingcell.getElementsByTagName("FORM")[0].rating;
				ratingvalue = 0;
				if (ratingchoices.length < 1) return;
				for (i=0; i < ratingchoices.length; i++) {
					if (ratingchoices[i].checked) {
						ratingvalue = ratingchoices[i].value;
					}
				}
				ratingcell.innerHTML = (ratingvalue);
				
				saveRating(bookname, ratingvalue);
			}
			
			function saveRating(name, rating) {
				log("Saving rating " + rating + " to " + name);
				books = getSavedBooks();
				index = findBookIndex(name);
				if (index != -1) {
					books[index].rating = rating;
				}
				booksstring = JSON.stringify(books);
				wave.getState().submitDelta({'books': booksstring});
				log("And books is now saved as " + wave.getState().get('books'));
			}

			function addbookrow(bookname, rating) {
				newbookrow = document.getElementById("newbookentry");
				newcount=(newbookrow.parentNode.getElementsByTagName("TR").length - 2) + 1;

				newtr = document.getElementById("row-template").cloneNode(true);
				newtr.removeAttribute("style");
				
				//Set the Serial number
				srtd = newtr.getElementsByTagName("TD")[0];
				srtd.innerHTML = newcount;
				//Set the book name
				nametd = newtr.getElementsByTagName("TD")[1];
				nametd.innerHTML = bookname;
				//Set the tr identifier
				newtr.setAttribute("id", "book"+newcount);
				//If rating is there, set the cell to it.
				log("The rating is " + rating);
				if (rating) {
					ratingtd = newtr.getElementsByTagName("TD")[2];
					ratingtd.innerHTML = rating;
				}

				newbookrow.parentNode.insertBefore(newtr, newbookrow);

				gadgets.window.adjustHeight(280);

			}
			
			function addbookstate(bookname, rating) {
				state = wave.getState();
				log("Original books element = " + state.get('books'));
				books = getSavedBooks();
				log("Books after eval = " + books);
				if (books) {
					log("book 0 = " + books[0]);
					if (books[0]) {
						log("book 0 is " + books[0].name + ":" + books[0].rating);
					}
				}

				if (!books) {
					books = new Array();
					if (rating) {
						books[0] = {"name":bookname, "rating": rating};
					} else {
						books[0] = {"name":bookname, "rating": 0};
					}
				} else {
					//Should first check if the book already exists.
					var exists=false;
					
					if (findBook(bookname))
						exists=true;
						
					if (exists) {
						message("Duplicate addition!");
						return false;
					} else {
						if (rating) {
							books[books.length] = {"name":bookname, "rating": rating};
						} else {
							books[books.length] = {"name":bookname, "rating": 0};
						}
						booksstring = JSON.stringify(books);
						state.submitDelta({'books': booksstring});
						count = parseInt(state.get('count'));
						if (!count) {
							count = 0;
						}
						state.submitDelta({'count': count+1});
						return true;
					}
				}
				
			}

			function addnewbook() {
				
				newbookrow = document.getElementById("newbookentry");
				newbookname = newbookrow.getElementsByTagName("FORM")[0].newbook.value;
				if (addbookstate(newbookname)) {
					addbookrow(newbookname);
				}

				return false;
			}
			
			function findBook(name) {
				var book;
				books = getSavedBooks();
				
				return books[findBookIndex(name)];
			}

			function findBookIndex(name) {
				var book;
				books = getSavedBooks();
				for (i=0; i<books.length; i++) {
					if (books[i].name.toLowerCase() == name.toLowerCase()) {
						return i;
					}
				}
				return -1;
			}
			
			function getSavedBooks() {
				return eval(wave.getState().get('books'));
			}

			function log(msg) {
				appendMessage("LOG:" +msg)
			}

			function message(msg) {
				document.getElementById("messages").innerHTML = msg + "<br/>"; 
			}

			function appendMessage(msg) {
				document.getElementById("messages").innerHTML += msg + "<br/>"; 
			}

			function disableEnterKey(e)
			{
				var key;     
				if(window.event)
					key = window.event.keyCode; //IE
				else
					key = e.which; //firefox     
				
				return (key != 13);
			}
			
			function tempClear() {
				wave.getState().submitDelta({'books': '[]' });
			}
			
			function init() {
				if (wave && wave.isInWaveContainer()) {
					wave.setStateCallback(stateUpdated);
				}
			}
			
			function stateUpdated() {
				log("State changed");
				showBookList();
			}
			
			function showBookList() {
				state = wave.getState();
				if (!state) {
					log("No state available.");
				} else if (!state.get('books')) {
					log("No books available.");
				} else {
					books = getSavedBooks();
					if (books.length && books.length > 0) {
						newbookrow = document.getElementById("newbookentry");
						currcount=(newbookrow.parentNode.getElementsByTagName("TR").length - 2);
						if (books.length > currcount) {
							for (i=currcount; i<books.length; i++) {
								currrating = books[i].rating;
								if ( currrating == 0) {
									log("Calling to add withOUT rating");
									addbookrow(books[i].name);
								} else {
									log("Calling to add with rating " + currrating);
									addbookrow(books[i].name, currrating);
								}
							}
						}
					}
				}
				log("Count is " + state.get('count'));
			}
			
			gadgets.util.registerOnLoadHandler(init);

		</script>
		<div id="reco-gadget">
			<div id="messages"></div>
			<table class="recos">
				<thead>
					<tr>
						<th>Rank</th>
						<th>Book Name</th>
						<th>Rating (5=Love it, 1=Trash)</th>
					</tr>
				</thead>
				<tbody>
					<tr id="newbookentry">
						<td></td>
						<td>Book Name: 
						<form onkeypress="return disableEnterKey(event)">
							<fieldset>
								<input type="text" name="newbook"/>
								<input type="button" value="Add" onclick="addnewbook()"/>
								<input type="button" value="Clear books" onclick="tempClear()"/>
							</fieldset>
						</form>
						</td>
						<td>
						</td>
					</tr>
					<tr id="row-template" style="display: none;">
						<td>0</td>
						<td>Book 0</td>
						<td>
							<form action="rate.it">
								<fieldset class="rate-it">
									<input type="radio" name="rating" value="5" onchange="rate(this)" /> 5 
									<input type="radio" name="rating" value="4" onchange="rate(this)" /> 4 
									<input type="radio" name="rating" value="3" onchange="rate(this)" /> 3 
									<input type="radio" name="rating" value="2" onchange="rate(this)" /> 2 
									<input type="radio" name="rating" value="1" onchange="rate(this)" /> 1 
								</fieldset>
							</form>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
    ]]>
    </Content>
</Module>